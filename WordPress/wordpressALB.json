{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template create VPC, LB and ASG",
    "Parameters": {
        "WebServerKeyName": {
            "Description": "This key will be used for ssh login into EC2 instances",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "LatestAmiId": {
            "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
            "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.99.0.0/16",
                "EnableDnsHostnames": true,
                "EnableDnsSupport": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "BlogVPC"
                    }
                ]
            } 
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "BlogIGW"
                    }
                ]
            }
        },
        "VPCGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "DMZ1Public": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.99.1.0/24",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [ 
                    {
                        "Key": "Name",
                        "Value": "DMZ1Public"
                    }
                ]
            }
        },
        "DMZ2Public": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.99.2.0/24",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [ 
                    {
                        "Key": "Name",
                        "Value": "DMZ2Public"
                    }
                ]
            }
        },
        "AppLayer1Private": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.99.11.0/24",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [ 
                    {
                        "Key": "Name",
                        "Value": "AppLayer1Private"
                    }
                ]
            }
        },
        "AppLayer2Private": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.99.12.0/24",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [ 
                    {
                        "Key": "Name",
                        "Value": "AppLayer2Private"
                    }
                ]
            }
        },
        "PublicRT": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "PublicRT"
                    }
                ]
            }
        },
        "PrivateRT": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "PrivateRT"
                    }
                ]
            }
        },
        "RouteTableAssociationA": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "DMZ1Public"
                },
                "RouteTableId": {
                    "Ref": "PublicRT"
                }
            }
        },
        "RouteTableAssociationB": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
                "Properties": {
                "SubnetId": {
                    "Ref": "DMZ2Public"
                },
                "RouteTableId": {
                    "Ref": "PublicRT"
                }
            }
        },
        "RoutePublic2Internet":{
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRT"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            },
            "DependsOn": "VPCGatewayAttachment"
        },
        "NATElasticIp": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "VPC"
            }
            
        },
        "NATGateway":{
            "Type": "AWS::EC2::NatGateway",
            "DependsOn": "NATElasticIp",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NATElasticIp",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "DMZ2Public"
                }
            }
        },
        "NATGatewayRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRT"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NATGateway"
                }
            }
        },
        "RouteTableAssociationC": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
                "Properties": {
                "SubnetId": {
                    "Ref": "AppLayer1Private"
                },
                "RouteTableId": {
                    "Ref": "PrivateRT"
                }
            }
        },
        "RouteTableAssociationD": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
                "Properties": {
                "SubnetId": {
                    "Ref": "AppLayer2Private"
                },
                "RouteTableId": {
                    "Ref": "PrivateRT"
                }
            }
        },
        "DMZNACL": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "DMZNACL"
                    }
                ]
            }
        },
        "SubnetNetworkAssociationA": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "DMZ1Public"
                },
                "NetworkAclId": {
                    "Ref": "DMZNACL"
                }
            }
        },
        "SubnetNetworkAssociationB": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "DMZ2Public"
                },
                "NetworkAclId": {
                    "Ref": "DMZNACL"
                }
            }
        },
        
        "DMZNACLEntryIngress100": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "DMZNACL"
                },
                "RuleNumber": "100",
                "Protocol": "6",
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "RuleAction": "Allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "DMZNACLEntryIngress110": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "DMZNACL"
                },
                "RuleNumber": "110",
                "Protocol": "6",
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "RuleAction": "Allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "DMZNACLEntryIngress120": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "DMZNACL"
                },
                "RuleNumber": "120",
                "Protocol": "6",
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "RuleAction": "Allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "DMZNACLEntryIngress130": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "DMZNACL"
                },
                "RuleNumber": "130",
                "Protocol": "6",
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "RuleAction": "Allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        
        "DMZNACLEntryEgress100": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "DMZNACL"
                },
                "RuleNumber": "100",
                "Protocol": "6",
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "RuleAction": "Allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "DMZNACLEntryEgress110": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "DMZNACL"
                },
                "RuleNumber": "110",
                "Protocol": "6",
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "RuleAction": "Allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "DMZNACLEntryEgress120": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "DMZNACL"
                },
                "RuleNumber": "120",
                "Protocol": "6",
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "RuleAction": "Allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "DMZNACLEntryEgress130": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "DMZNACL"
                },
                "RuleNumber": "130",
                "Protocol": "6",
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "RuleAction": "Allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "AppNACL": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "AppNACL"
                    }
                ]
            }
        },
        "SubnetNetworkAssociationC": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "AppLayer1Private"
                },
                "NetworkAclId": {
                    "Ref": "AppNACL"
                }
            }
        },
        "SubnetNetworkAssociationD": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "AppLayer2Private"
                },
                "NetworkAclId": {
                    "Ref": "AppNACL"
                }
            }
        },
        
        "AppNACLEntryIngress100": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "AppNACL"
                },
                "RuleNumber": "100",
                "Protocol": "6",
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "RuleAction": "Allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "AppNACLEntryIngress110": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "AppNACL"
                },
                "RuleNumber": "110",
                "Protocol": "6",
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "RuleAction": "Allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "AppNACLEntryIngress120": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "AppNACL"
                },
                "RuleNumber": "120",
                "Protocol": "6",
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "RuleAction": "Allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "AppNACLEntryIngress130": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "AppNACL"
                },
                "RuleNumber": "130",
                "Protocol": "6",
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "RuleAction": "Allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        
        "AppNACLEntryEgress100": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "AppNACL"
                },
                "RuleNumber": "100",
                "Protocol": "6",
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "RuleAction": "Allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "AppNACLEntryEgress110": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "AppNACL"
                },
                "RuleNumber": "110",
                "Protocol": "6",
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "RuleAction": "Allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "AppNACLEntryEgress120": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "AppNACL"
                },
                "RuleNumber": "120",
                "Protocol": "6",
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "RuleAction": "Allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "AppNACLEntryEgress130": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "AppNACL"
                },
                "RuleNumber": "130",
                "Protocol": "6",
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "RuleAction": "Allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "LoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "wordpress-lbalancer",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "LBSG"
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "443",
                        "IpProtocol": "tcp",
                        "ToPort": "443"
                    }
                ]
            }
        },
        "LoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Subnets": [
                    {
                        "Ref": "DMZ1Public"
                    },
                    {
                        "Ref": "DMZ2Public"
                    }
                ],
                "Name": "Load-Balancer",
                "Type": "application",
                "Scheme": "internet-facing",
                "SecurityGroups": [
                    {
                        "Ref": "LoadBalancerSecurityGroup"
                    }
                ],
                "IpAddressType": "ipv4"
            }
        },
        "TargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckEnabled" : true,
                "HealthCheckIntervalSeconds" : "10",
                "HealthCheckPath" : "/phpinfo.php",
                "HealthCheckPort" : "80",
                "HealthCheckProtocol" : "HTTP",
                "HealthCheckTimeoutSeconds" : "5",
                "HealthyThresholdCount" : "2",
                "Name" : "TG1",
                "Port" : "80",
                "Protocol" : "HTTP",
                "UnhealthyThresholdCount" : "2",
                "VpcId" : {
                    "Ref": "VPC"
                }
            }
        },
        "Listener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "TargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "LoadBalancer"
                },
                "Port": "80",
                "Protocol": "HTTP"
            }
        },
        "BastionSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "wordpress-bastion",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "BastionSG"
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "22",
                        "IpProtocol": "tcp",
                        "ToPort": "22"
                    }
                ]
            }
        },
        "WebServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "wordpress-ec2",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "WebServerSG"
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "LoadBalancerSecurityGroup"
                        },
                        "ToPort": "80"
                    },
                    {
                        "FromPort": "22",
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "BastionSecurityGroup"
                        },
                        "ToPort": "22"
                    }
                ]
            }
        },
        "LaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": "ami-0947d2ba12ee1ff75",
                "InstanceType": "t2.micro",
                "SecurityGroups": [
                    {
                        "Ref": "WebServerSecurityGroup"
                    }
                ],
                "KeyName":{
                    "Ref": "WebServerKeyName"
                },
                "AssociatePublicIpAddress": "false",
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join" : [
                            "",
                            [
                                "#!/bin/bash\n",
                                "yum update -y\n",
                                "cd /tmp/\n",
                                "wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm\n",
                                "yum localinstall -y mysql57-community-release-el7-8.noarch.rpm\n",
                                "yum install -y mysql-community-server\n",
                                "yum install -y httpd php php-mysql git\n",
                                "wget https://wordpress.org/wordpress-5.1.1.tar.gz\n",
                                "tar -xzvf wordpress-5.1.1.tar.gz\n",
                                "mv wordpress /var/www/html/\n",
                                "groupadd www\n",
                                "usermod -aG www ec2-user\n",
                                "chown -R root:www /var/www/html\n",
                                "echo '<?php phpinfo(); ?>' > /var/www/html/phpinfo.php\n",
                                "systemctl enable httpd\n",
                                "systemctl start httpd\n",
                                "systemctl enable mysqld\n",
                                "systemctl start mysqld\n"
                            ]
                        ]
                    }
                },
                "InstanceMonitoring": true

            }
        },
        "AutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "TargetGroupARNs":[
                    {
                        "Ref": "TargetGroup"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfiguration"
                },
                "MinSize": "2",
                "MaxSize": "10",
                "DesiredCapacity": "4",
                "Cooldown": "300",
                "HealthCheckGracePeriod": "300",
                "HealthCheckType": "ELB",
                "VPCZoneIdentifier": [
                    {
                        "Ref": "AppLayer1Private"
                    },
                    {
                        "Ref": "AppLayer2Private"
                    }
                ],
                "Tags": [
                    {
                        "PropagateAtLaunch": "True",
                        "Value": "instance-wordpress",
                        "Key": "Name"
                    }
                ]
            }      
        },
        "ASGCPUPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "AutoScalingGroup"
                },
                "Cooldown": 300,
                "PolicyType":"TargetTrackingScaling",
                "TargetTrackingConfiguration":{
                    "PredefinedMetricSpecification":{
                        "PredefinedMetricType":"ASGAverageCPUUtilization"
                    },
                    "TargetValue": "80"
                }
            }
        },
        "BastionInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": "ami-0947d2ba12ee1ff75",
                "InstanceType": "t2.micro",
                "KeyName": {
                    "Ref": "WebServerKeyName"
                },
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "BastionSecurityGroup"
                            }
                        ],
                        "AssociatePublicIpAddress": true,
                        "DeviceIndex": "0",
                        "DeleteOnTermination": true,
                        "SubnetId": {
                            "Ref": "DMZ1Public"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "bastion-host"
                    }
                ]
            }
        }

    },
    "Outputs": {
        "pubIpAddress1": {
            "Description": "Return me private IP",
            "Value": {
                "Fn::GetAtt": [
                    "BastionInstance",
                    "PrivateIp"
                ]
            }
        } 
    }
}
